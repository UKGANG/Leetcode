'''
924. Minimize Malware Spread
https://leetcode.com/problems/minimize-malware-spread/
'''
from typing import List

from test_tool import assert_value


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        sccs = []
        accessed = [False] * len(graph)
        initial = sorted(initial)
        for node in initial:
            if accessed[node]:
                continue
            accessed[node] = True
            scc = []
            sccs.append(scc)
            self.dfs(graph, node, scc, accessed)

        scc_map = [(scc, []) for scc in sccs]
        for scc, points in scc_map:
            for idx, node in enumerate(initial):
                if node in scc:
                    points.append(node)

        scc_map = [(scc, points) for scc, points in scc_map if len(points) == 1]
        if len(scc_map) == 0:
            return initial[0]
        return sorted(scc_map, key=lambda item: len(item[0]), reverse=True)[0][1][0]

    def dfs(self, graph: List[List[int]], i, scc, accessed):
        scc.append(i)
        for j in range(len(graph)):
            if accessed[j]:
                continue
            if not graph[i][j]:
                continue
            accessed[j] = True
            self.dfs(graph, j, scc, accessed)


assert_value(0, Solution().minMalwareSpread, graph=[
    [1, 1, 0],
    [1, 1, 0],
    [0, 0, 1]
], initial=[0, 1])
assert_value(0, Solution().minMalwareSpread, graph=[
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]
], initial=[0, 2])
assert_value(1, Solution().minMalwareSpread, graph=[
    [1, 1, 1],
    [1, 1, 1],
    [1, 1, 1]
], initial=[1, 2])
assert_value(2, Solution().minMalwareSpread, graph=[
    [1, 1, 0],
    [1, 1, 0],
    [0, 0, 1]
], initial=[0, 1, 2])
assert_value(1, Solution().minMalwareSpread, graph=[
    [1, 0, 1, 0],
    [0, 1, 0, 0],
    [1, 0, 1, 0],
    [0, 0, 0, 1]
], initial=[1])
assert_value(2, Solution().minMalwareSpread, graph=[
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
], initial=[7, 8, 6, 2, 3])
